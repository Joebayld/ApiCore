FORMAT: 1A
HOST: http://api.appstorehq.net/




# ApiCore

ApiCore has a fairly simple API which leverages JWT authentication.

Should you require any assistance implementing Boost's API, please feel free to contact us via our LiveUI Slack on channel <a href="http://bit.ly/2B0dEyt">#help-boost</a>
[![Slack](https://img.shields.io/badge/join-our%20slack-745EAF.svg?style=flat)](http://bit.ly/2B0dEyt)

Open source code licensed under Apache 2 license can be found on github.com: [![Slack](https://img.shields.io/badge/source-github.com-black.svg?style=flat)](https://github.com/manGoweb/Boost)

## Install [/install]

Installs default admin user. Login `admin@liveui.io`, password `admin`. 

*Endpoint doesn't work in a `production` environment.*

### Install [GET]

+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "code": "maintenance_ok",
                "description": "Install finished"
            }

+ Response 412 (application/json; charset=utf-8)

        {
            "error": "not_available",
            "description": "Endpoint is not available in production mode"
        }
        
        
## Un-Install [/uninstall]

Removes all database tables and data, this operation is irreversible. 

*Endpoint doesn't work in a `production` environment.*

### Un-Install [GET]

+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "code": "maintenance_ok",
                "description": "Uninstall finished, there are no data nor tables in the database; Please run `/install` before you continue"
            }

+ Response 412 (application/json; charset=utf-8)

        {
            "error": "not_available",
            "description": "Endpoint is not available in production mode"
        }
        
        
## Re-Install [/reinstall]

Combination of `/uninstall` and then `/install` endpoints.

*Endpoint doesn't work in a `production` environment.*

### Re-Install [GET]

+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "code": "maintenance_ok",
                "description": "Install finished"
            }

+ Response 412 (application/json; charset=utf-8)

        {
            "error": "not_available",
            "description": "Endpoint is not available in production mode"
        }
        


## Server info [/info]

    
    *Doesn't require authentication*


### Info [GET]

Information about the server itself, also contains links to the server icons.


+ Response 200 (application/json; charset=utf-8)
       
    + Body


            {
                "name": "Booster!",
                "url": "https://www.example.com",
                "icons": [
                    {
                        "url": "https://image-store.example.com/server/image/64",
                        "size": 64
                    },
                    {
                        "url": "https://image-store.example.com/server/image/128",
                        "size": 128
                    },
                    {
                        "url": "https://image-store.example.com/server/image/192",
                        "size": 192
                    },
                    {
                        "url": "https://image-store.example.com/server/image/256",
                        "size": 256
                    },
                    {
                        "url": "https://image-store.example.com/server/image/512",
                        "size": 512
                    }
                ]
            }

      
        
## Authentication [/auth]

When authenticating, first you need to get a permanent token which your client needs to store locally for further use.
Response header also contains a JWT token which will be valid for 3 minutes. When JWT token expires it needs to be refreshed using "Refresh JWT token"

### Get permanent token (BASIC auth) [GET]


+ Request
    
    + Headers

            Authorization: Basic YWRtaW5AbGl2ZXVpLmlvOmFkbWlu


+ Response 200 (application/json; charset=utf-8)
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MTk4NTk0ODIuOTgwNzgzOSwidXNlcklkIjoiNjMwQzk3RTYtQUM1Ni00MjEzLTg4MkItM0JFQkFFNTBCRjZEIn0.aPMfWZnHJSHa_rDxY-u9x-Vs-amQvxeVL8zGrPhwNGU
            
    + Body

            {
                "expires": 543969500.30378401,
                "id": "62D26F36-4E50-4D5C-921D-A0B30672BC83",
                "token": "F8CAB8E4-F507-46AC-9F15-B2C369C23126",
                "user": {
                    "password": "admin",
                    "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                    "lastname": "Admin",
                    "registered": 541114427,
                    "firstname": "Super",
                    "email": "admin@liveui.io",
                    "su": true,
                    "disabled": false
                }
            }

+ Response 401 (application/json; charset=utf-8)

        {
            "error": "auth_error",
            "description": "Authentication has failed"
        }

### Get permanent token [POST]


+ Request
    + Headers
    
            Content-Type: application/json
            

    + Body

            {
                "username": "admin@liveui.io",
                "password": "s3cretPassw0rd"
            }

+ Response 200 (application/json; charset=utf-8)
    + Headers

            Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MTk4NTk0ODIuOTgwNzgzOSwidXNlcklkIjoiNjMwQzk3RTYtQUM1Ni00MjEzLTg4MkItM0JFQkFFNTBCRjZEIn0.aPMfWZnHJSHa_rDxY-u9x-Vs-amQvxeVL8zGrPhwNGU
            
    + Body

            {
                "expires": 543969500.30378401,
                "id": "62D26F36-4E50-4D5C-921D-A0B30672BC83",
                "token": "F8CAB8E4-F507-46AC-9F15-B2C369C23126",
                "user": {
                    "password": "admin",
                    "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                    "lastname": "Admin",
                    "registered": 541114427,
                    "firstname": "Super",
                    "email": "admin@liveui.io",
                    "su": true,
                    "disabled": false
                }
            }

+ Response 401 (application/json; charset=utf-8)

        {
            "error": "auth_error",
            "description": "Authentication has failed"
        }


## Token refresh [/token]

JWT token needs to be refreshed after 30 seconds from the last request made. With each successful request the token's expiration is extended.


### Refresh JWT token (BASIC auth) [GET]


+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072


+ Response 200 (application/json; charset=utf-8)

    + Headers

            Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MTk4NTk0ODIuOTgwNzgzOSwidXNlcklkIjoiNjMwQzk3RTYtQUM1Ni00MjEzLTg4MkItM0JFQkFFNTBCRjZEIn0.aPMfWZnHJSHa_rDxY-u9x-Vs-amQvxeVL8zGrPhwNGU
            
    + Body

            {
                "id": "205E4B37-E57E-4474-A681-602BF49D56A3",
                "user": {
                    "id": "8E6EFF51-8773-48DF-A1F5-D0A8C25BF9EF",
                    "lastname": "Admin",
                    "registered": "2018-03-26T17:06:22Z",
                    "firstname": "Super",
                    "username": "admin",
                    "email": "admin@liveui.io",
                    "su": true,
                    "disabled": false
                },
                "expires": "2018-05-08T16:23:22Z"
            }

+ Response 401 (application/json; charset=utf-8)

        {
            "error": "auth_error",
            "description": "Authentication has failed"
        }


### Refresh JWT token [POST]


+ Request
    
    + Headers
    
            Content-Type: application/json
            
    + Body

            {
                "token": "EA58FE6F-E2A0-404D-A252-1BBFB286A072"
            }


+ Response 200 (application/json; charset=utf-8)

    + Headers

            Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MTk4NTk0ODIuOTgwNzgzOSwidXNlcklkIjoiNjMwQzk3RTYtQUM1Ni00MjEzLTg4MkItM0JFQkFFNTBCRjZEIn0.aPMfWZnHJSHa_rDxY-u9x-Vs-amQvxeVL8zGrPhwNGU
            
    + Body

            {
                "id": "205E4B37-E57E-4474-A681-602BF49D56A3",
                "user": {
                    "id": "8E6EFF51-8773-48DF-A1F5-D0A8C25BF9EF",
                    "lastname": "Admin",
                    "registered": "2018-03-26T17:06:22Z",
                    "firstname": "Super",
                    "username": "admin",
                    "email": "admin@liveui.io",
                    "su": true,
                    "disabled": false
                },
                "expires": "2018-05-08T16:23:22Z"
            }

+ Response 401 (application/json; charset=utf-8)

        {
            "error": "auth_error",
            "description": "Authentication has failed"
        }



## Teams [/teams]

JWT token needs to be refreshed after 30 seconds from the last request made. With each successful request the token's expiration is extended.


### List all available teams [GET]


+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072


+ Response 200 (application/json; charset=utf-8)
            
    + Body

            [
                {
                    "initials": "AT",
                    "id": "FF6E32DC-4F23-4F75-ADBA-B50864763386",
                    "admin": true,
                    "name": "Admin Team",
                    "identifier": "admin-team",
                    "color": "06DBAB"
                },
                {
                    "initials": "AY",
                    "id": "2F25DF0A-6B4E-4E14-A693-CFB6A5A26519",
                    "admin": false,
                    "name": "admin Yo!",
                    "identifier": "admin-yo",
                    "color": "65B14B"
                }
            ]


+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



### Create new team [POST]

Team identifier needs to be unique for the whole platform. If sent in an incorect format, string in it will be formatted into a "safe text", for example `My amazing TEAM!` will be formatted into `my-amazing-team`.

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "name": "My new team",
                "identifier": "my-new-team"
            }



+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "admin": false,
                "name": "My NEW team",
                "identifier": "my-new-team",
                "initials": "MN",
                "color": "06DBAB"
            }

+ Response 409 (application/json; charset=utf-8)

        {
            "code": "app_error",
            "error": "Identifier already exists"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



## Teams check [/teams/check]


### Check if team exists [POST]

Team identifier needs to be unique for the whole platform. If sent in an incorect format, string in it will be formatted into a "safe text", for example `My amazing TEAM!` will be formatted into `my-amazing-team`.

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "identifier": "my-new-team"
            }



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "code": "ok",
                "error": "Identifier is available",
                "identifier": "my-new-team"
            }
        
+ Response 408 (application/json; charset=utf-8)

        {
            "code": "app_error",
            "error": "Identifier already exists"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



## Team [/teams/{teamId}]

For updates, team identifier needs to be unique for the whole platform. If sent in an incorect format, string in it will be formatted into a "safe text", for example `My amazing TEAM!` will be formatted into `my-amazing-team`.


### Get single team [GET]


+ Parameters
    + teamId (required, number) - Id of the team

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "admin": false,
                "name": "MY team",
                "identifier": "my-team",
                "initials": "MY",
                "color": "06DBAB"
            }
        

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



### Update team [PUT]


+ Parameters
    + teamId (required, UUID) - Id of the team

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "name": "My updated team!",
                "identifier": "my-updated-team"
            }



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "admin": false,
                "name": "My Updated Team!",
                "identifier": "my-updated-team",
                "initials": "MU",
                "color": "06DBAB"
            }
        
+ Response 408 (application/json; charset=utf-8)

        {
            "code": "app_error",
            "error": "Identifier already exists"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }
        

## List team users [/teams/{teamId}/users]

List active users of a team.

### List [GET]

+ Parameters
    + teamId (required, UUID) - Id of the team


+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

        [
            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "lastname": "Admin",
                "registered": 541114427,
                "su": true,
                "username": "admin",
                "email": "admin@liveui.io",
                "firstname": "Super",
                "disabled": false
            },
            {
                "id": "59ECA5DB-6603-4C08-B910-B32922A34FA9",
                "lastname": "Rafaj",
                "registered": 541550120,
                "su": false,
                "username": "rafiki2000",
                "email": "dev@liveui.io",
                "firstname": "Ondrej",
                "disabled": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }
        
        
## Link user to a team [/teams/{teamId}/link]

Link an existing user to a team.

### Link [POST]

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "user_id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D"
            }



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "code": "ok",
                "error": "User has been added to the team"
            }
        
+ Response 409 (application/json; charset=utf-8)

        {
            "code": "team_error",
            "error": "User is already a member of the team"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }


## Remove user from a team [/teams/{teamId}/unlink]

Reverse the effect of an invitation. User will be removed from the team but won't be completely deleted.

### Unlink [POST]

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "user_id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D"
            }



+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "code": "ok",
                "error": "User has been removed from the team"
            }
        
+ Response 404 (application/json; charset=utf-8)

        {
            "code": "team_error",
            "error": "User not found"
        }

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }



## Users [/users?search={search_term}]


### List and/or search [GET]

List active users available within your scope.


+ Parameters
    + search_term (optional, string) - Partial or full search keyword


+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

        [
            {
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "lastname": "Admin",
                "registered": 541114427,
                "username": "admin",
                "su": true,
                "email": "admin@liveui.io",
                "firstname": "Super",
                "disabled": false
            },
            {
                "id": "59ECA5DB-6603-4C08-B910-B32922A34FA9",
                "lastname": "Rafaj",
                "registered": 541550120,
                "username": "rafiki2000",
                "su": false,
                "email": "dev@liveui.io",
                "firstname": "Ondrej",
                "disabled": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }
        
        
### Register user [POST]

Register endpoint is not secured and should be used for new registrations by users, not invitations.

+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072
            Content-Type: application/json
            
    + Body

            {
                "username": "aceofspades",
                "firstname": "Lemmy",
                "lastname": "Kilmister",
                "email": "lemmy@liveui.io",
                "password": "sup3rS3cr3t"
            }



+ Response 200 (application/json; charset=utf-8)
            
    + Body

            {
                "id": "8E6EFF51-8773-48DF-A1F5-D0A8C25BF9EF",
                "email": "lemmy@liveui.io",
                "lastname": "Kilmister",
                "username": "admin",
                "registered": 542296870.67299497,
                "disabled": true,
                "su": false,
                "firstname": "Lemmy"
            }

+ Response 409 (application/json; charset=utf-8)

        {
            "code": "user_error",
            "error": "Email already exists"
        }


        

## Global users [/users/global?search={search_term}]


### List and/or search [GET]


List active users within the running instance with confidential information obscured or removed.


+ Parameters
    + search_term (required, string) - Partial or full search keyword


+ Request
    
    + Headers

            Authorization: Token EA58FE6F-E2A0-404D-A252-1BBFB286A072



+ Response 200 (application/json; charset=utf-8)

        [
            {
                "avatar": "https://www.gravatar.com/avatar/6dfb5866908b5c82523599ac16f55d6a",
                "id": "630C97E6-AC56-4213-882B-3BEBAE50BF6D",
                "lastname": "Admin",
                "registered": 541114427,
                "username": "admin",
                "su": true,
                "firstname": "Super",
                "disabled": false
            },
            {
                "avatar": "https://www.gravatar.com/avatar/6dfb5866908b5c82523599ac16f55d6a",
                "id": "59ECA5DB-6603-4C08-B910-B32922A34FA9",
                "lastname": "Rafaj",
                "registered": 541550120,
                "username": "rafiki2000",
                "su": false,
                "firstname": "Ondrej",
                "disabled": false
            }
        ]

+ Response 401 (application/json; charset=utf-8)

        {
            "code": "auth_failed",
            "error": "Unable to verify authorization token"
        }
        


## Show tables [/tables]

Shows a list of database tables available. 

*Endpoint doesn't work in a `production` environment.*

### Show tables [GET]

+ Response 200 (application/json; charset=utf-8)
            
    + Body

            [
                "apps",
                "fluent",
                "tokens",
                "users"
            ]

+ Response 412 (application/json; charset=utf-8)

        {
            "error": "not_available",
            "description": "Endpoint is not available in production mode"
        }
        


            
## Teapot [/teapot]

No authentication is needed

### Check [GET]

+ Response 418 (application/json; charset=utf-8)

    + Body

            {
                "message": "I am a teapot!"
            }


## Ping [/ping]

No authentication is needed

### Check [GET]

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "message": "pong"
            }